document.addEventListener("DOMContentLoaded", () => {
    const audio = document.getElementById("audio");
    const playButton = document.getElementById("play-button");
    const nextButton = document.getElementById("next-button");
    const prevButton = document.getElementById("prev-button");
    const seekSlider = document.getElementById("seek-slider");
    const volumeSlider = document.getElementById("volume-slider");
    const currentTimeDisplay = document.getElementById("current-time");
    const durationDisplay = document.getElementById("duration");
    const currentSongTitle = document.getElementById("current-song-title");
    const currentSongArtist = document.getElementById("current-song-artist");
    const currentSongAlbum = document.getElementById("current-song-album");
    const currentSongPlayCount = document.getElementById("current-song-playcount");
    const currentSongLikes = document.getElementById("current-song-likes");
    const playlistItems = document.querySelectorAll(".playlist-item");
    const searchSong = document.getElementById("search-song")
    const filterLiked = document.getElementById("filter-liked")

    audio.volume = 0.25;
    let currentIndex = 0;
    const songs = Array.from(playlistItems);
    
    // –§–∏–ª—å—Ç—Ä –ª—é–±–∏–º—ã—Ö —Ç—Ä–µ–∫–æ–≤
    filterLiked.addEventListener("change", () => {
        if (filterLiked.checked) {
            playlistItems.forEach((item) => {
                const likeButton = item.nextElementSibling;
                if (likeButton.textContent == "ü§ç") {
                    item.parentElement.style.display = "none";
                }
            });
        } else {
            playlistItems.forEach((item) => {
                item.parentElement.style.display = "block";
            });
        }
    });

    // –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ —Ç—Ä–µ–∫–æ–≤
    searchSong.addEventListener("input", (event) => {
        const searchInput = event.target.value.toLowerCase();
        playlistItems.forEach((item) => {
            const itemText = item.textContent.toLowerCase();
            if (itemText.includes(searchInput)){
                item.parentElement.style.display = "block";
            } else {
                item.parentElement.style.display = "none"
            }
        });
    });
    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ
    const updateCurrentSongInfo = (songElement) => {
        audio.src = songElement.dataset.songFile;
        currentSongTitle.textContent = songElement.dataset.songName;
        currentSongArtist.textContent = "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: " + songElement.dataset.songArtist;
        currentSongAlbum.textContent = "–ê–ª—å–±–æ–º: " + (songElement.dataset.songAlbum || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π");
        currentSongPlayCount.textContent = "–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–ª–∏: " + (songElement.dataset.songPlaycount);
        currentSongLikes.textContent = "–ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å: " + (songElement.dataset.songLikes);

        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ 
        currentSongArtist.addEventListener("click", () => {
            const artistPhoto = songElement.dataset.songArtistPhoto;

            document.getElementById("current-song-info").style.display = "none";
            document.getElementById("artist-info").style.display = "grid";
            document.getElementById("artist-info").style.background = "linear-gradient( rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0.7) ), url(" + artistPhoto + ")";
            document.getElementById("artist-info").style.backgroundRepeat = "no-repeat";
            document.getElementById("artist-info").style.backgroundSize = "cover";
            document.getElementById("artist-info").style.backgroundPosition = "center";
            document.querySelector(".artist-name").textContent = songElement.dataset.songArtist;
            document.querySelector(".artist-desc").textContent = "–û–ø–∏—Å–∞–Ω–∏–µ: " + songElement.dataset.songArtistDesc;
        })
    
        document.querySelector(".back-to-info").firstChild.addEventListener("click", () => {
            document.getElementById("artist-info").style.display = "none";
            document.getElementById("current-song-info").style.display = "block";
        })

        // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —É –≤—Å–µ—Ö –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ —Ç–µ–∫—É—â–µ–º—É
        songs.forEach(item => item.classList.remove("active"));
        songElement.classList.add("active");

        audio.play();
    };

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç—Ä–µ–∫
    updateCurrentSongInfo(songs[currentIndex]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –ø–ª–µ–π–ª–∏—Å—Ç—É –¥–ª—è —Å–º–µ–Ω—ã —Ç—Ä–µ–∫–∞
    songs.forEach((item, index) => {
        const likeButton = item.nextElementSibling;

        item.addEventListener("click", () => {
            currentIndex = index;
            updateCurrentSongInfo(item);
        });
        if (likeButton) {
            likeButton.addEventListener("click", () => {
                toggleLike(item.dataset.songId, likeButton);
            });
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ Play/Pause
    playButton.addEventListener("click", () => {
        if (audio.paused) {
            audio.play();
            playButton.innerHTML = '<i class="material-icons">pause</i>';
            document.documentElement.style.setProperty("--thumb-opacity", "0");
        } else {
            audio.pause();
            playButton.innerHTML = '<i class="material-icons">play_circle_filled</i>';
            document.documentElement.style.setProperty("--thumb-opacity", "1");
        }
    });


    // –°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫
    nextButton.addEventListener("click", () => {
        currentIndex = (currentIndex + 1) % songs.length;
        updateCurrentSongInfo(songs[currentIndex]);
    });

    // –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫
    prevButton.addEventListener("click", () => {
        currentIndex = (currentIndex - 1 + songs.length) % songs.length;
        updateCurrentSongInfo(songs[currentIndex]);
    });

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ
    audio.addEventListener("ended", () => {
        currentIndex = (currentIndex + 1) % songs.length;
        updateCurrentSongInfo(songs[currentIndex]);
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–∞–π–¥–µ—Ä–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    audio.addEventListener("timeupdate", () => {
        seekSlider.value = audio.currentTime;
        currentTimeDisplay.textContent = formatTime(audio.currentTime);
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–∫–∞
    audio.addEventListener("loadedmetadata", () => {
        seekSlider.max = audio.duration;
        durationDisplay.textContent = formatTime(audio.duration);
    });

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Ç—Ä–µ–∫–∞ —á–µ—Ä–µ–∑ —Å–ª–∞–π–¥–µ—Ä
    seekSlider.addEventListener("input", () => {
        audio.currentTime = seekSlider.value;
    });

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
    volumeSlider.addEventListener("input", (e) => {
        audio.volume = e.target.value / 100;
    });

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ (–º–∏–Ω—É—Ç—ã:—Å–µ–∫—É–Ω–¥—ã)
    function formatTime(seconds) {
        const mins = Math.floor(seconds / 60);
        const secs = Math.floor(seconds % 60);
        return `${mins}:${secs < 10 ? "0" : ""}${secs}`;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π
    function updatePlaycount(songId) {
        fetch(`/mini_spotify/update_playcount/${songId}/`, {
            method: "POST",
            headers: {  
                "X-CSRFToken": getCSRFToken(),  // CSRF-—Ç–æ–∫–µ–Ω
            }
        })
            .then(response => response.json())
            .then(data => console.log("Song updated: ", data, " for ", songId))
            .catch(error => console.error("Error updating playcount:", error));
    }

    // –°–º–µ–Ω–∞ –ª–∞–π–∫–∞
    function toggleLike(songId, button) {
        fetch(`/mini_spotify/toggle_like/${songId}/`, {
            method: "POST",
            headers: {
                "X-CSRFToken": getCSRFToken(),  // CSRF-—Ç–æ–∫–µ–Ω
            }
        })
            .then(response => response.json())
            .then(data => {
                console.log("Like toggled:", data, " for ", songId)
                button.dataset.liked = data.liked; // –û–ë–ù–û–í–õ–Ø–ï–ú –∑–Ω–∞—á–µ–Ω–∏–µ data-liked –≤ DOM

                if (data.liked) {
                    button.textContent = "‚ù§Ô∏è"; // –ï—Å–ª–∏ –ª–∞–π–∫–Ω—É–ª–∏, –∫—Ä–∞—Å–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ
                } else {
                    button.textContent = "ü§ç"; // –ï—Å–ª–∏ —É–±—Ä–∞–ª–∏ –ª–∞–π–∫, –±–µ–ª–æ–µ —Å–µ—Ä–¥—Ü–µ
                }
            })
            .catch(error => console.error("Error toggling like:", error));
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è CSRF-—Ç–æ–∫–µ–Ω–∞ (–≤–∞–∂–Ω–æ –¥–ª—è POST-–∑–∞–ø—Ä–æ—Å–æ–≤ –≤ Django)
    function getCSRFToken() {
        return document.querySelector("[name=csrfmiddlewaretoken]").value;
    }

    // –í–µ—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ "play"
    let playTimeout = null;
    let isPlaycountUpdated = false;
    let playTime = 0; // –ù–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    let lastPlayTimestamp = null;

    audio.addEventListener("play", () => {
        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        lastPlayTimestamp = Date.now();

        // –ï—Å–ª–∏ –ø–µ—Å–Ω—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω–∞—è (>=30 —Å–µ–∫) –∏ –µ—â–µ –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω–∞,
        // –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
        if (!isPlaycountUpdated && audio.duration >= 30) {
            playTimeout = setTimeout(() => {
                updatePlaycount(currentIndex + 1);
                isPlaycountUpdated = true;
            }, 30000);
        }
    });

    audio.addEventListener("pause", () => {
        // –ü—Ä–∏ –ø–∞—É–∑–µ –≤—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–ª–æ—Å—å —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ç–∞—Ä—Ç–∞
        if (lastPlayTimestamp) {
            playTime += (Date.now() - lastPlayTimestamp) / 1000;
            lastPlayTimestamp = null;
        }
        clearTimeout(playTimeout);

        // –ï—Å–ª–∏ –ø–µ—Å–Ω—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω–∞—è –∏ –æ–±—â–µ–µ –ø—Ä–æ—Å–ª—É—à–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è >= 30 —Å–µ–∫—É–Ω–¥,
        // –æ–±–Ω–æ–≤–ª—è–µ–º playcount
        if (audio.duration >= 30 && playTime >= 30 && !isPlaycountUpdated) {
            updatePlaycount(currentIndex + 1);
            isPlaycountUpdated = true;
        }
    });

    audio.addEventListener("ended", () => {
        // –ï—Å–ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Å–Ω–∏ –º–µ–Ω—å—à–µ 30 —Å–µ–∫—É–Ω–¥, –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç playTime
        if (audio.duration < 30) {
            if (!isPlaycountUpdated) {
                updatePlaycount(currentIndex + 1);
                isPlaycountUpdated = true;
            }
        }
        // –ï—Å–ª–∏ –ø–µ—Å–Ω—è –¥–ª–∏–Ω–Ω–∞—è (>=30 —Å–µ–∫) –∏ –æ–±—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å, –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º
        else if (playTime >= 30 && !isPlaycountUpdated) {
            updatePlaycount(currentIndex + 1);
            isPlaycountUpdated = true;
        }
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏ —Ñ–ª–∞–≥ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–µ—Å–Ω–∏
        playTime = 0;
        isPlaycountUpdated = false;
    });
});
